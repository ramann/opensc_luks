{
  "name": "Smartcard LUKS",
  "tagline": "Forget that passphrase!",
  "body": "# Smartcard LUKS\r\n\r\n## How to use a PKCS#15-compliant smartcard to unlock a LUKS encrypted /root\r\nThis has been tested on Ubuntu 14.04 LTS with a Feitian PKI (FTCOS/PK-01C) smartcard and a generic USB smartcard reader. The Ubuntu instance has an unencrypted /boot partition and an encrypted /root partition. Essential info for unlocking the partition was found here: https://blog.g3rt.nl/luks-smartcard-or-token.html. After many VM restarts I was able to put together the patches for the initramfs hook and script and am successfully using this on several laptops.\r\n\r\n### The general steps:\r\n* Erase and initialize card\r\n* Create public/private key pair on smartcard\r\n* Create key file and add it to a LUKS key slot\r\n* Encrypt key file using public key from smartcard\r\n* Modify initramfs to use smartcard to decrypt the encrypted keyfile\r\n\r\n### The details:\r\n1. Install smartcard middleware\r\n\r\n    ```sudo apt-get install pcscd opensc```\r\n\r\n2. Erase smartcard\r\n\r\n    ```pkcs15-init -E```\r\n    \r\n3. Initialize smartcard\r\n\r\n    ```pkcs15-init --create-pkcs15 -p pkcs15+onepin --pin 1234 --puk 4321```\r\n    \r\n4. Create public/private key pair on smartcard\r\n\r\n    ```pkcs15-init -G rsa/2048 -i 01 -a 01 -u decrypt --pin 1234```\r\n    \r\n5. Create a random key file and add it to a LUKS key slot\r\n\r\n    ```sudo touch /root/rootkey```\r\n    \r\n    ```sudo chmod 600 /root/rootkey```\r\n\r\n    ```sudo dd if=/dev/random of=/root/rootkey bs=1 count=245 #change to urandom if you can't wait```\r\n    \r\n    ```sudo cryptsetup luksAddKey /dev/sda2 /root/rootkey```\r\n    \r\n6. Export the public key from smartcard\r\n\r\n    ```pkcs15-tool --read-public-key 01 -o public_key_rsa2048.pem```\r\n\r\n7. Encrypt key file using public key\r\n\r\n    ```sudo openssl rsautl -encrypt -pubin -inkey public_key_rsa2048.pem  -in /root/rootkey -out /root/rootkey.enc```\r\n    \r\n    ```sudo rm /root/rootkey```\r\n\r\n8. Edit crypttab. This change sends the encrypted key file as a param to the keyscript\r\n\r\n    This should be of the form: \r\n    \r\n    ```mapped_device_name source_block_device key_file luks,keyscript=decrypt_opensc```\r\n    \r\n    For example:\r\n    \r\n    ```sda2_crypt UUID=d332ecc5-ce8b-4900-a04a-a79abd029d6d /root/rootkey.enc luks,keyscript=decrypt_opensc```\r\n\r\n9. Apply patch to cryptopensc hook and regenerate initramfs\r\n\r\n    ```sudo patch /usr/share/initramfs-tools/hooks/cryptopensc < cryptopensc.patch ```\r\n    \r\n    ```sudo patch /usr/share/initramfs-tools/scripts/local-bottom/cryptopensc < local-bottom-cryptopensc.patch```\r\n\r\n    ```sudo update-initramfs -u```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}